package io.rong.message;import android.os.Parcel;import android.text.TextUtils;import org.json.JSONException;import org.json.JSONObject;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;import io.rong.common.RLog;import io.rong.imlib.MessageTag;import io.rong.imlib.model.MentionedInfo;import io.rong.imlib.model.MessageContent;import io.rong.imlib.model.UserInfo;import io.rong.common.ParcelUtils;@MessageTag(value = "RC:DanMu", flag = 2)public class DanMuMessage extends MessageContent {    private final static String TAG = "DanMuMessage";    protected DanMuMessage() {    }    public DanMuMessage( String content ,  JSONObject sender  ) {                  this.setContent(content);                  this.setSender(sender);            }          private String content;      public void setContent(String content) {          this.content = content;      }      public String getContent() {          return content;      }          private JSONObject sender;      public void setSender(JSONObject sender) {          this.sender = sender;      }      public JSONObject getSender() {          return sender;      }            @Override    public byte[] encode() {        JSONObject jsonObj = new JSONObject();        try {                          jsonObj.put("content", getContent());                          jsonObj.put("sender", getSender());                    } catch (JSONException e) {            RLog.e(TAG, "JSONException " + e.getMessage());        }        try {            return jsonObj.toString().getBytes("UTF-8");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return null;    }    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {              ParcelUtils.writeToParcel(dest, getContent());              ParcelUtils.writeToParcel(dest, getSender());            }    public DanMuMessage(Parcel in) {              setContent(ParcelUtils.readFromParcel(in));              setSender(ParcelUtils.readFromParcel(in));            }    public static final Creator<DanMuMessage> CREATOR = new Creator<DanMuMessage>() {        @Override        public DanMuMessage createFromParcel(Parcel source) {            return new DanMuMessage(source);        }        @Override        public DanMuMessage[] newArray(int size) {            return new DanMuMessage[size];        }    };}